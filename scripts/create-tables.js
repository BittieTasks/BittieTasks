import postgres from 'postgres';\n\nconst sql = postgres(process.env.DATABASE_URL);\n\nasync function createTables() {\n  console.log('Creating database tables...');\n  \n  try {\n    // Create users table\n    await sql`\n      CREATE TABLE IF NOT EXISTS users (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        username TEXT NOT NULL UNIQUE,\n        email TEXT NOT NULL UNIQUE,\n        password_hash TEXT NOT NULL,\n        first_name TEXT NOT NULL,\n        last_name TEXT NOT NULL,\n        profile_picture TEXT,\n        total_earnings DECIMAL DEFAULT '0.00',\n        rating DECIMAL DEFAULT '0.00',\n        completed_tasks INTEGER DEFAULT 0,\n        current_streak INTEGER DEFAULT 0,\n        skills TEXT[] DEFAULT ARRAY[]::TEXT[],\n        availability JSONB,\n        is_email_verified BOOLEAN DEFAULT false,\n        is_phone_verified BOOLEAN DEFAULT false,\n        is_identity_verified BOOLEAN DEFAULT false,\n        is_background_checked BOOLEAN DEFAULT false,\n        phone_number TEXT,\n        phone_verification_code TEXT,\n        phone_verification_expires TIMESTAMP,\n        identity_documents TEXT[] DEFAULT ARRAY[]::TEXT[],\n        trust_score INTEGER DEFAULT 0,\n        risk_score INTEGER DEFAULT 0,\n        identity_score INTEGER DEFAULT 0,\n        is_captcha_verified BOOLEAN DEFAULT false,\n        captcha_score DECIMAL DEFAULT '0.0',\n        device_fingerprint TEXT,\n        ip_address TEXT,\n        user_agent TEXT,\n        signup_method TEXT DEFAULT 'email',\n        behavior_score INTEGER DEFAULT 0,\n        last_captcha_verification TIMESTAMP,\n        government_id_uploaded BOOLEAN DEFAULT false,\n        government_id_verified BOOLEAN DEFAULT false,\n        face_verification_completed BOOLEAN DEFAULT false,\n        liveliness_check_passed BOOLEAN DEFAULT false,\n        mouse_movement_analyzed BOOLEAN DEFAULT false,\n        keystroke_pattern_analyzed BOOLEAN DEFAULT false,\n        session_behavior_score INTEGER DEFAULT 0,\n        human_verification_level TEXT DEFAULT 'basic',\n        two_factor_enabled BOOLEAN DEFAULT false,\n        two_factor_secret TEXT,\n        backup_codes TEXT[] DEFAULT ARRAY[]::TEXT[],\n        email_verification_token TEXT,\n        password_reset_token TEXT,\n        password_reset_expires TIMESTAMP,\n        last_login TIMESTAMP,\n        failed_login_attempts INTEGER DEFAULT 0,\n        account_locked BOOLEAN DEFAULT false,\n        lock_until TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        subscription_tier TEXT DEFAULT 'free',\n        subscription_status TEXT DEFAULT 'active',\n        subscription_start_date TIMESTAMP,\n        subscription_end_date TIMESTAMP,\n        stripe_customer_id TEXT,\n        stripe_subscription_id TEXT,\n        monthly_task_limit INTEGER DEFAULT 5,\n        monthly_tasks_completed INTEGER DEFAULT 0,\n        last_monthly_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        priority_support BOOLEAN DEFAULT false,\n        ad_free BOOLEAN DEFAULT false,\n        premium_badge BOOLEAN DEFAULT false,\n        referral_code TEXT UNIQUE,\n        referred_by TEXT,\n        referral_count INTEGER DEFAULT 0,\n        referral_earnings DECIMAL DEFAULT '0.00',\n        ad_frequency INTEGER DEFAULT 5,\n        ad_relevance INTEGER DEFAULT 7,\n        ad_types TEXT[] DEFAULT ARRAY['native_feed', 'sponsored_task']::TEXT[],\n        ad_categories TEXT[] DEFAULT ARRAY['education', 'health-wellness', 'retail']::TEXT[],\n        max_ad_budget INTEGER DEFAULT 100,\n        min_ad_budget INTEGER DEFAULT 10,\n        family_friendly_only BOOLEAN DEFAULT true,\n        local_ads_only BOOLEAN DEFAULT false,\n        ethical_ads_only BOOLEAN DEFAULT true,\n        ad_personalization BOOLEAN DEFAULT true\n      )\n    `;\n    console.log('‚úì Users table created');\n\n    // Create task_categories table\n    await sql`\n      CREATE TABLE IF NOT EXISTS task_categories (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        name TEXT NOT NULL,\n        icon TEXT NOT NULL,\n        color TEXT NOT NULL,\n        description TEXT\n      )\n    `;\n    console.log('‚úì Task categories table created');\n\n    // Create tasks table\n    await sql`\n      CREATE TABLE IF NOT EXISTS tasks (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        title TEXT NOT NULL,\n        description TEXT NOT NULL,\n        category_id VARCHAR REFERENCES task_categories(id),\n        payment DECIMAL,\n        duration_minutes INTEGER,\n        difficulty TEXT NOT NULL,\n        requirements TEXT[] DEFAULT ARRAY[]::TEXT[],\n        image_url TEXT,\n        rating DECIMAL DEFAULT '0.00',\n        completions INTEGER DEFAULT 0,\n        is_active BOOLEAN DEFAULT true,\n        task_type TEXT NOT NULL DEFAULT 'shared',\n        sponsor_info JSONB,\n        payment_type TEXT NOT NULL DEFAULT 'cash',\n        barter_offered TEXT,\n        barter_wanted TEXT,\n        estimated_value DECIMAL,\n        barter_category TEXT,\n        allow_accountability_partners BOOLEAN DEFAULT false,\n        max_partners INTEGER DEFAULT 3,\n        partner_payment DECIMAL DEFAULT '0.00',\n        flexible_barter BOOLEAN DEFAULT false,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n    console.log('‚úì Tasks table created');\n\n    // Create sessions table for express-session\n    await sql`\n      CREATE TABLE IF NOT EXISTS sessions (\n        sid VARCHAR NOT NULL PRIMARY KEY,\n        sess JSON NOT NULL,\n        expire TIMESTAMP(6) NOT NULL\n      )\n    `;\n    await sql`CREATE INDEX IF NOT EXISTS IDX_session_expire ON sessions(expire)`;\n    console.log('‚úì Sessions table created');\n\n    console.log('üéâ All tables created successfully!');\n    \n  } catch (error) {\n    console.error('‚ùå Error creating tables:', error);\n    throw error;\n  } finally {\n    await sql.end();\n  }\n}\n\ncreateTables().catch(console.error);