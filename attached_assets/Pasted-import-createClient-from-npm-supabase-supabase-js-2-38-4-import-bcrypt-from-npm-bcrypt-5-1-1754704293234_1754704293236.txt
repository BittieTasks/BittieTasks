import { createClient } from "npm:@supabase/supabase-js@2.38.4";
import bcrypt from "npm:bcrypt@5.1.1";

// Utility function to hash passwords
async function hashPassword(password) {
  const saltRounds = 10;
  return await bcrypt.hash(password, saltRounds);
}

// The handler for the Edge Function
Deno.serve(async (req) => {
  try {
    // Create a client with admin privileges to bypass RLS
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );
    
    // Fetch all existing users from the public.users table
    const { data: existingUsers, error: fetchError } = await supabaseAdmin
      .from('users')
      .select('*');
    
    if (fetchError) {
      throw new Error(`Error fetching users: ${fetchError.message}`);
    }
    
    console.log(`Found ${existingUsers.length} users to migrate.`);
    
    const results = {
      migrated: [],
      errors: [],
      skipped: []
    };
    
    // Process each user
    for (const user of existingUsers) {
      try {
        // Check if user already exists in auth.users by email
        const { data: existingAuthUsers } = await supabaseAdmin
          .from('users')
          .select('id, email')
          .eq('email', user.email)
          .maybeSingle();
        
        if (existingAuthUsers) {
          console.log(`User with email ${user.email} already exists in auth system. Skipping.`);
          results.skipped.push({ id: user.id, email: user.email, reason: 'Email already exists' });
          continue;
        }
        
        // Create the user in the auth system
        const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
          email: user.email,
          password: user.password_hash ? user.password_hash : await hashPassword('TemporaryPassword123!'),
          email_confirm: true, // Mark email as confirmed
          user_metadata: {
            first_name: user.first_name,
            last_name: user.last_name,
            username: user.username
          }
        });
        
        if (createError) {
          throw new Error(`Error creating auth user: ${createError.message}`);
        }
        
        // Update the profile record with all the additional fields
        const { error: updateError } = await supabaseAdmin
          .from('profiles')
          .update({
            username: user.username,
            first_name: user.first_name,
            last_name: user.last_name,
            profile_picture: user.profile_picture,
            total_earnings: user.total_earnings,
            rating: user.rating,
            completed_tasks: user.completed_tasks,
            current_streak: user.current_streak,
            skills: user.skills,
            availability: user.availability,
            phone_number: user.phone_number,
            trust_score: user.trust_score,
            risk_score: user.risk_score,
            identity_score: user.identity_score,
            behavior_score: user.behavior_score,
            subscription_tier: user.subscription_tier,
            subscription_status: user.subscription_status,
            subscription_start_date: user.subscription_start_date,
            subscription_end_date: user.subscription_end_date,
            stripe_customer_id: user.stripe_customer_id,
            stripe_subscription_id: user.stripe_subscription_id,
            monthly_task_limit: user.monthly_task_limit,
            monthly_tasks_completed: user.monthly_tasks_completed,
            last_monthly_reset: user.last_monthly_reset,
            priority_support: user.priority_support,
            ad_free: user.ad_free,
            premium_badge: user.premium_badge,
            referral_code: user.referral_code,
            referred_by: user.referred_by,
            referral_count: user.referral_count,
            referral_earnings: user.referral_earnings
          })
          .eq('id', newUser.user.id);
        
        if (updateError) {
          throw new Error(`Error updating profile: ${updateError.message}`);
        }
        
        // Add mapping between old ID and new ID
        results.migrated.push({ 
          oldId: user.id, 
          newId: newUser.user.id, 
          email: user.email 
        });
        
      } catch (err) {
        console.error(`Error migrating user ${user.id}: ${err.message}`);
        results.errors.push({ id: user.id, email: user.email, error: err.message });
      }
    }
    
    return new Response(
      JSON.stringify({
        success: true,
        message: `Migration completed with ${results.migrated.length} users migrated, ${results.errors.length} errors, and ${results.skipped.length} skipped.`,
        results
      }),
      { 
        headers: { 'Content-Type': 'application/json' },
        status: 200
      }
    );
    
  } catch (err) {
    console.error(`Migration failed: ${err.message}`);
    return new Response(
      JSON.stringify({
        success: false,
        message: `Migration failed: ${err.message}`
      }),
      { 
        headers: { 'Content-Type': 'application/json' },
        status: 500
      }
    );
  }
});